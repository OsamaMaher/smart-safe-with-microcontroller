
Smart_safe.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000009da  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000068  00800060  000009da  00000a4e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000ab6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000ae8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000120  00000000  00000000  00000b24  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001965  00000000  00000000  00000c44  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009ee  00000000  00000000  000025a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000beb  00000000  00000000  00002f97  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000228  00000000  00000000  00003b84  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004d1  00000000  00000000  00003dac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000e56  00000000  00000000  0000427d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000100  00000000  00000000  000050d3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 96 00 	jmp	0x12c	; 0x12c <__ctors_end>
   4:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
   8:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
   c:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  10:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  14:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  18:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  1c:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  20:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  24:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  28:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  2c:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  30:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  34:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  38:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  3c:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  40:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  44:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  48:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  4c:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  50:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  54:	b9 00       	.word	0x00b9	; ????
  56:	d2 00       	.word	0x00d2	; ????
  58:	eb 00       	.word	0x00eb	; ????
  5a:	04 01       	movw	r0, r8
  5c:	1c 01       	movw	r2, r24
  5e:	1c 01       	movw	r2, r24
  60:	1c 01       	movw	r2, r24
  62:	1c 01       	movw	r2, r24
  64:	1c 01       	movw	r2, r24
  66:	1c 01       	movw	r2, r24
  68:	1c 01       	movw	r2, r24
  6a:	1c 01       	movw	r2, r24
  6c:	1c 01       	movw	r2, r24
  6e:	1c 01       	movw	r2, r24
  70:	1c 01       	movw	r2, r24
  72:	1c 01       	movw	r2, r24
  74:	1c 01       	movw	r2, r24
  76:	1c 01       	movw	r2, r24
  78:	1c 01       	movw	r2, r24
  7a:	1c 01       	movw	r2, r24
  7c:	1c 01       	movw	r2, r24
  7e:	1c 01       	movw	r2, r24
  80:	1c 01       	movw	r2, r24
  82:	1c 01       	movw	r2, r24
  84:	1c 01       	movw	r2, r24
  86:	1c 01       	movw	r2, r24
  88:	1c 01       	movw	r2, r24
  8a:	1c 01       	movw	r2, r24
  8c:	1c 01       	movw	r2, r24
  8e:	1c 01       	movw	r2, r24
  90:	1c 01       	movw	r2, r24
  92:	1c 01       	movw	r2, r24
  94:	b9 00       	.word	0x00b9	; ????
  96:	d2 00       	.word	0x00d2	; ????
  98:	eb 00       	.word	0x00eb	; ????
  9a:	04 01       	movw	r0, r8
  9c:	29 01       	movw	r4, r18
  9e:	42 01       	movw	r8, r4
  a0:	5b 01       	movw	r10, r22
  a2:	74 01       	movw	r14, r8
  a4:	8c 01       	movw	r16, r24
  a6:	8c 01       	movw	r16, r24
  a8:	8c 01       	movw	r16, r24
  aa:	8c 01       	movw	r16, r24
  ac:	8c 01       	movw	r16, r24
  ae:	8c 01       	movw	r16, r24
  b0:	8c 01       	movw	r16, r24
  b2:	8c 01       	movw	r16, r24
  b4:	8c 01       	movw	r16, r24
  b6:	8c 01       	movw	r16, r24
  b8:	8c 01       	movw	r16, r24
  ba:	8c 01       	movw	r16, r24
  bc:	8c 01       	movw	r16, r24
  be:	8c 01       	movw	r16, r24
  c0:	8c 01       	movw	r16, r24
  c2:	8c 01       	movw	r16, r24
  c4:	8c 01       	movw	r16, r24
  c6:	8c 01       	movw	r16, r24
  c8:	8c 01       	movw	r16, r24
  ca:	8c 01       	movw	r16, r24
  cc:	8c 01       	movw	r16, r24
  ce:	8c 01       	movw	r16, r24
  d0:	8c 01       	movw	r16, r24
  d2:	8c 01       	movw	r16, r24
  d4:	8c 01       	movw	r16, r24
  d6:	8c 01       	movw	r16, r24
  d8:	8c 01       	movw	r16, r24
  da:	8c 01       	movw	r16, r24
  dc:	29 01       	movw	r4, r18
  de:	42 01       	movw	r8, r4
  e0:	5b 01       	movw	r10, r22
  e2:	74 01       	movw	r14, r8
  e4:	99 01       	movw	r18, r18
  e6:	ab 01       	movw	r20, r22
  e8:	bd 01       	movw	r22, r26
  ea:	cf 01       	movw	r24, r30
  ec:	e1 01       	movw	r28, r2
  ee:	e1 01       	movw	r28, r2
  f0:	e1 01       	movw	r28, r2
  f2:	e1 01       	movw	r28, r2
  f4:	e1 01       	movw	r28, r2
  f6:	e1 01       	movw	r28, r2
  f8:	e1 01       	movw	r28, r2
  fa:	e1 01       	movw	r28, r2
  fc:	e1 01       	movw	r28, r2
  fe:	e1 01       	movw	r28, r2
 100:	e1 01       	movw	r28, r2
 102:	e1 01       	movw	r28, r2
 104:	e1 01       	movw	r28, r2
 106:	e1 01       	movw	r28, r2
 108:	e1 01       	movw	r28, r2
 10a:	e1 01       	movw	r28, r2
 10c:	e1 01       	movw	r28, r2
 10e:	e1 01       	movw	r28, r2
 110:	e1 01       	movw	r28, r2
 112:	e1 01       	movw	r28, r2
 114:	e1 01       	movw	r28, r2
 116:	e1 01       	movw	r28, r2
 118:	e1 01       	movw	r28, r2
 11a:	e1 01       	movw	r28, r2
 11c:	e1 01       	movw	r28, r2
 11e:	e1 01       	movw	r28, r2
 120:	e1 01       	movw	r28, r2
 122:	e1 01       	movw	r28, r2
 124:	99 01       	movw	r18, r18
 126:	ab 01       	movw	r20, r22
 128:	bd 01       	movw	r22, r26
 12a:	cf 01       	movw	r24, r30

0000012c <__ctors_end>:
 12c:	11 24       	eor	r1, r1
 12e:	1f be       	out	0x3f, r1	; 63
 130:	cf e5       	ldi	r28, 0x5F	; 95
 132:	d8 e0       	ldi	r29, 0x08	; 8
 134:	de bf       	out	0x3e, r29	; 62
 136:	cd bf       	out	0x3d, r28	; 61

00000138 <__do_copy_data>:
 138:	10 e0       	ldi	r17, 0x00	; 0
 13a:	a0 e6       	ldi	r26, 0x60	; 96
 13c:	b0 e0       	ldi	r27, 0x00	; 0
 13e:	ea ed       	ldi	r30, 0xDA	; 218
 140:	f9 e0       	ldi	r31, 0x09	; 9
 142:	02 c0       	rjmp	.+4      	; 0x148 <__do_copy_data+0x10>
 144:	05 90       	lpm	r0, Z+
 146:	0d 92       	st	X+, r0
 148:	a8 3c       	cpi	r26, 0xC8	; 200
 14a:	b1 07       	cpc	r27, r17
 14c:	d9 f7       	brne	.-10     	; 0x144 <__do_copy_data+0xc>
 14e:	0e 94 fe 03 	call	0x7fc	; 0x7fc <main>
 152:	0c 94 eb 04 	jmp	0x9d6	; 0x9d6 <_exit>

00000156 <__bad_interrupt>:
 156:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000015a <DIO_SETPINDIR>:
{
	DIO_WRITE(port, 0, READ_BIT(value, 0));
	DIO_WRITE(port, 1, READ_BIT(value, 1));
	DIO_WRITE(port, 2, READ_BIT(value, 2));
	DIO_WRITE(port, 3, READ_BIT(value, 3));
}
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	fc 01       	movw	r30, r24
 15e:	e1 54       	subi	r30, 0x41	; 65
 160:	f1 09       	sbc	r31, r1
 162:	e4 32       	cpi	r30, 0x24	; 36
 164:	f1 05       	cpc	r31, r1
 166:	08 f0       	brcs	.+2      	; 0x16a <DIO_SETPINDIR+0x10>
 168:	67 c0       	rjmp	.+206    	; 0x238 <DIO_SETPINDIR+0xde>
 16a:	e6 5d       	subi	r30, 0xD6	; 214
 16c:	ff 4f       	sbci	r31, 0xFF	; 255
 16e:	0c 94 e5 04 	jmp	0x9ca	; 0x9ca <__tablejump2__>
 172:	41 30       	cpi	r20, 0x01	; 1
 174:	59 f4       	brne	.+22     	; 0x18c <DIO_SETPINDIR+0x32>
 176:	2a b3       	in	r18, 0x1a	; 26
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	02 c0       	rjmp	.+4      	; 0x182 <DIO_SETPINDIR+0x28>
 17e:	88 0f       	add	r24, r24
 180:	99 1f       	adc	r25, r25
 182:	6a 95       	dec	r22
 184:	e2 f7       	brpl	.-8      	; 0x17e <DIO_SETPINDIR+0x24>
 186:	82 2b       	or	r24, r18
 188:	8a bb       	out	0x1a, r24	; 26
 18a:	08 95       	ret
 18c:	2a b3       	in	r18, 0x1a	; 26
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	02 c0       	rjmp	.+4      	; 0x198 <DIO_SETPINDIR+0x3e>
 194:	88 0f       	add	r24, r24
 196:	99 1f       	adc	r25, r25
 198:	6a 95       	dec	r22
 19a:	e2 f7       	brpl	.-8      	; 0x194 <DIO_SETPINDIR+0x3a>
 19c:	80 95       	com	r24
 19e:	82 23       	and	r24, r18
 1a0:	8a bb       	out	0x1a, r24	; 26
 1a2:	08 95       	ret
 1a4:	41 30       	cpi	r20, 0x01	; 1
 1a6:	59 f4       	brne	.+22     	; 0x1be <DIO_SETPINDIR+0x64>
 1a8:	27 b3       	in	r18, 0x17	; 23
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <DIO_SETPINDIR+0x5a>
 1b0:	88 0f       	add	r24, r24
 1b2:	99 1f       	adc	r25, r25
 1b4:	6a 95       	dec	r22
 1b6:	e2 f7       	brpl	.-8      	; 0x1b0 <DIO_SETPINDIR+0x56>
 1b8:	82 2b       	or	r24, r18
 1ba:	87 bb       	out	0x17, r24	; 23
 1bc:	08 95       	ret
 1be:	27 b3       	in	r18, 0x17	; 23
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	02 c0       	rjmp	.+4      	; 0x1ca <DIO_SETPINDIR+0x70>
 1c6:	88 0f       	add	r24, r24
 1c8:	99 1f       	adc	r25, r25
 1ca:	6a 95       	dec	r22
 1cc:	e2 f7       	brpl	.-8      	; 0x1c6 <DIO_SETPINDIR+0x6c>
 1ce:	80 95       	com	r24
 1d0:	82 23       	and	r24, r18
 1d2:	87 bb       	out	0x17, r24	; 23
 1d4:	08 95       	ret
 1d6:	41 30       	cpi	r20, 0x01	; 1
 1d8:	59 f4       	brne	.+22     	; 0x1f0 <DIO_SETPINDIR+0x96>
 1da:	24 b3       	in	r18, 0x14	; 20
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	02 c0       	rjmp	.+4      	; 0x1e6 <DIO_SETPINDIR+0x8c>
 1e2:	88 0f       	add	r24, r24
 1e4:	99 1f       	adc	r25, r25
 1e6:	6a 95       	dec	r22
 1e8:	e2 f7       	brpl	.-8      	; 0x1e2 <DIO_SETPINDIR+0x88>
 1ea:	82 2b       	or	r24, r18
 1ec:	84 bb       	out	0x14, r24	; 20
 1ee:	08 95       	ret
 1f0:	24 b3       	in	r18, 0x14	; 20
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	02 c0       	rjmp	.+4      	; 0x1fc <DIO_SETPINDIR+0xa2>
 1f8:	88 0f       	add	r24, r24
 1fa:	99 1f       	adc	r25, r25
 1fc:	6a 95       	dec	r22
 1fe:	e2 f7       	brpl	.-8      	; 0x1f8 <DIO_SETPINDIR+0x9e>
 200:	80 95       	com	r24
 202:	82 23       	and	r24, r18
 204:	84 bb       	out	0x14, r24	; 20
 206:	08 95       	ret
 208:	41 30       	cpi	r20, 0x01	; 1
 20a:	59 f4       	brne	.+22     	; 0x222 <DIO_SETPINDIR+0xc8>
 20c:	21 b3       	in	r18, 0x11	; 17
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	02 c0       	rjmp	.+4      	; 0x218 <DIO_SETPINDIR+0xbe>
 214:	88 0f       	add	r24, r24
 216:	99 1f       	adc	r25, r25
 218:	6a 95       	dec	r22
 21a:	e2 f7       	brpl	.-8      	; 0x214 <DIO_SETPINDIR+0xba>
 21c:	82 2b       	or	r24, r18
 21e:	81 bb       	out	0x11, r24	; 17
 220:	08 95       	ret
 222:	21 b3       	in	r18, 0x11	; 17
 224:	81 e0       	ldi	r24, 0x01	; 1
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	02 c0       	rjmp	.+4      	; 0x22e <DIO_SETPINDIR+0xd4>
 22a:	88 0f       	add	r24, r24
 22c:	99 1f       	adc	r25, r25
 22e:	6a 95       	dec	r22
 230:	e2 f7       	brpl	.-8      	; 0x22a <DIO_SETPINDIR+0xd0>
 232:	80 95       	com	r24
 234:	82 23       	and	r24, r18
 236:	81 bb       	out	0x11, r24	; 17
 238:	08 95       	ret

0000023a <DIO_WRITE>:
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	fc 01       	movw	r30, r24
 23e:	e1 54       	subi	r30, 0x41	; 65
 240:	f1 09       	sbc	r31, r1
 242:	e4 32       	cpi	r30, 0x24	; 36
 244:	f1 05       	cpc	r31, r1
 246:	08 f0       	brcs	.+2      	; 0x24a <DIO_WRITE+0x10>
 248:	67 c0       	rjmp	.+206    	; 0x318 <DIO_WRITE+0xde>
 24a:	e2 5b       	subi	r30, 0xB2	; 178
 24c:	ff 4f       	sbci	r31, 0xFF	; 255
 24e:	0c 94 e5 04 	jmp	0x9ca	; 0x9ca <__tablejump2__>
 252:	41 30       	cpi	r20, 0x01	; 1
 254:	59 f4       	brne	.+22     	; 0x26c <DIO_WRITE+0x32>
 256:	2b b3       	in	r18, 0x1b	; 27
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	02 c0       	rjmp	.+4      	; 0x262 <DIO_WRITE+0x28>
 25e:	88 0f       	add	r24, r24
 260:	99 1f       	adc	r25, r25
 262:	6a 95       	dec	r22
 264:	e2 f7       	brpl	.-8      	; 0x25e <DIO_WRITE+0x24>
 266:	82 2b       	or	r24, r18
 268:	8b bb       	out	0x1b, r24	; 27
 26a:	08 95       	ret
 26c:	2b b3       	in	r18, 0x1b	; 27
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	02 c0       	rjmp	.+4      	; 0x278 <DIO_WRITE+0x3e>
 274:	88 0f       	add	r24, r24
 276:	99 1f       	adc	r25, r25
 278:	6a 95       	dec	r22
 27a:	e2 f7       	brpl	.-8      	; 0x274 <DIO_WRITE+0x3a>
 27c:	80 95       	com	r24
 27e:	82 23       	and	r24, r18
 280:	8b bb       	out	0x1b, r24	; 27
 282:	08 95       	ret
 284:	41 30       	cpi	r20, 0x01	; 1
 286:	59 f4       	brne	.+22     	; 0x29e <DIO_WRITE+0x64>
 288:	28 b3       	in	r18, 0x18	; 24
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	02 c0       	rjmp	.+4      	; 0x294 <DIO_WRITE+0x5a>
 290:	88 0f       	add	r24, r24
 292:	99 1f       	adc	r25, r25
 294:	6a 95       	dec	r22
 296:	e2 f7       	brpl	.-8      	; 0x290 <DIO_WRITE+0x56>
 298:	82 2b       	or	r24, r18
 29a:	88 bb       	out	0x18, r24	; 24
 29c:	08 95       	ret
 29e:	28 b3       	in	r18, 0x18	; 24
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	02 c0       	rjmp	.+4      	; 0x2aa <DIO_WRITE+0x70>
 2a6:	88 0f       	add	r24, r24
 2a8:	99 1f       	adc	r25, r25
 2aa:	6a 95       	dec	r22
 2ac:	e2 f7       	brpl	.-8      	; 0x2a6 <DIO_WRITE+0x6c>
 2ae:	80 95       	com	r24
 2b0:	82 23       	and	r24, r18
 2b2:	88 bb       	out	0x18, r24	; 24
 2b4:	08 95       	ret
 2b6:	41 30       	cpi	r20, 0x01	; 1
 2b8:	59 f4       	brne	.+22     	; 0x2d0 <DIO_WRITE+0x96>
 2ba:	25 b3       	in	r18, 0x15	; 21
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	02 c0       	rjmp	.+4      	; 0x2c6 <DIO_WRITE+0x8c>
 2c2:	88 0f       	add	r24, r24
 2c4:	99 1f       	adc	r25, r25
 2c6:	6a 95       	dec	r22
 2c8:	e2 f7       	brpl	.-8      	; 0x2c2 <DIO_WRITE+0x88>
 2ca:	82 2b       	or	r24, r18
 2cc:	85 bb       	out	0x15, r24	; 21
 2ce:	08 95       	ret
 2d0:	25 b3       	in	r18, 0x15	; 21
 2d2:	81 e0       	ldi	r24, 0x01	; 1
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	02 c0       	rjmp	.+4      	; 0x2dc <DIO_WRITE+0xa2>
 2d8:	88 0f       	add	r24, r24
 2da:	99 1f       	adc	r25, r25
 2dc:	6a 95       	dec	r22
 2de:	e2 f7       	brpl	.-8      	; 0x2d8 <DIO_WRITE+0x9e>
 2e0:	80 95       	com	r24
 2e2:	82 23       	and	r24, r18
 2e4:	85 bb       	out	0x15, r24	; 21
 2e6:	08 95       	ret
 2e8:	41 30       	cpi	r20, 0x01	; 1
 2ea:	59 f4       	brne	.+22     	; 0x302 <DIO_WRITE+0xc8>
 2ec:	22 b3       	in	r18, 0x12	; 18
 2ee:	81 e0       	ldi	r24, 0x01	; 1
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	02 c0       	rjmp	.+4      	; 0x2f8 <DIO_WRITE+0xbe>
 2f4:	88 0f       	add	r24, r24
 2f6:	99 1f       	adc	r25, r25
 2f8:	6a 95       	dec	r22
 2fa:	e2 f7       	brpl	.-8      	; 0x2f4 <DIO_WRITE+0xba>
 2fc:	82 2b       	or	r24, r18
 2fe:	82 bb       	out	0x12, r24	; 18
 300:	08 95       	ret
 302:	22 b3       	in	r18, 0x12	; 18
 304:	81 e0       	ldi	r24, 0x01	; 1
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	02 c0       	rjmp	.+4      	; 0x30e <DIO_WRITE+0xd4>
 30a:	88 0f       	add	r24, r24
 30c:	99 1f       	adc	r25, r25
 30e:	6a 95       	dec	r22
 310:	e2 f7       	brpl	.-8      	; 0x30a <DIO_WRITE+0xd0>
 312:	80 95       	com	r24
 314:	82 23       	and	r24, r18
 316:	82 bb       	out	0x12, r24	; 18
 318:	08 95       	ret

0000031a <DIO_READ>:
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	fc 01       	movw	r30, r24
 31e:	e1 54       	subi	r30, 0x41	; 65
 320:	f1 09       	sbc	r31, r1
 322:	e4 32       	cpi	r30, 0x24	; 36
 324:	f1 05       	cpc	r31, r1
 326:	08 f0       	brcs	.+2      	; 0x32a <DIO_READ+0x10>
 328:	4c c0       	rjmp	.+152    	; 0x3c2 <DIO_READ+0xa8>
 32a:	ee 58       	subi	r30, 0x8E	; 142
 32c:	ff 4f       	sbci	r31, 0xFF	; 255
 32e:	0c 94 e5 04 	jmp	0x9ca	; 0x9ca <__tablejump2__>
 332:	29 b3       	in	r18, 0x19	; 25
 334:	81 e0       	ldi	r24, 0x01	; 1
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	06 2e       	mov	r0, r22
 33a:	02 c0       	rjmp	.+4      	; 0x340 <DIO_READ+0x26>
 33c:	88 0f       	add	r24, r24
 33e:	99 1f       	adc	r25, r25
 340:	0a 94       	dec	r0
 342:	e2 f7       	brpl	.-8      	; 0x33c <DIO_READ+0x22>
 344:	30 e0       	ldi	r19, 0x00	; 0
 346:	82 23       	and	r24, r18
 348:	93 23       	and	r25, r19
 34a:	02 c0       	rjmp	.+4      	; 0x350 <DIO_READ+0x36>
 34c:	95 95       	asr	r25
 34e:	87 95       	ror	r24
 350:	6a 95       	dec	r22
 352:	e2 f7       	brpl	.-8      	; 0x34c <DIO_READ+0x32>
 354:	08 95       	ret
 356:	26 b3       	in	r18, 0x16	; 22
 358:	81 e0       	ldi	r24, 0x01	; 1
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	06 2e       	mov	r0, r22
 35e:	02 c0       	rjmp	.+4      	; 0x364 <DIO_READ+0x4a>
 360:	88 0f       	add	r24, r24
 362:	99 1f       	adc	r25, r25
 364:	0a 94       	dec	r0
 366:	e2 f7       	brpl	.-8      	; 0x360 <DIO_READ+0x46>
 368:	30 e0       	ldi	r19, 0x00	; 0
 36a:	82 23       	and	r24, r18
 36c:	93 23       	and	r25, r19
 36e:	02 c0       	rjmp	.+4      	; 0x374 <DIO_READ+0x5a>
 370:	95 95       	asr	r25
 372:	87 95       	ror	r24
 374:	6a 95       	dec	r22
 376:	e2 f7       	brpl	.-8      	; 0x370 <DIO_READ+0x56>
 378:	08 95       	ret
 37a:	23 b3       	in	r18, 0x13	; 19
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	06 2e       	mov	r0, r22
 382:	02 c0       	rjmp	.+4      	; 0x388 <DIO_READ+0x6e>
 384:	88 0f       	add	r24, r24
 386:	99 1f       	adc	r25, r25
 388:	0a 94       	dec	r0
 38a:	e2 f7       	brpl	.-8      	; 0x384 <DIO_READ+0x6a>
 38c:	30 e0       	ldi	r19, 0x00	; 0
 38e:	82 23       	and	r24, r18
 390:	93 23       	and	r25, r19
 392:	02 c0       	rjmp	.+4      	; 0x398 <DIO_READ+0x7e>
 394:	95 95       	asr	r25
 396:	87 95       	ror	r24
 398:	6a 95       	dec	r22
 39a:	e2 f7       	brpl	.-8      	; 0x394 <DIO_READ+0x7a>
 39c:	08 95       	ret
 39e:	20 b3       	in	r18, 0x10	; 16
 3a0:	81 e0       	ldi	r24, 0x01	; 1
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	06 2e       	mov	r0, r22
 3a6:	02 c0       	rjmp	.+4      	; 0x3ac <DIO_READ+0x92>
 3a8:	88 0f       	add	r24, r24
 3aa:	99 1f       	adc	r25, r25
 3ac:	0a 94       	dec	r0
 3ae:	e2 f7       	brpl	.-8      	; 0x3a8 <DIO_READ+0x8e>
 3b0:	30 e0       	ldi	r19, 0x00	; 0
 3b2:	82 23       	and	r24, r18
 3b4:	93 23       	and	r25, r19
 3b6:	02 c0       	rjmp	.+4      	; 0x3bc <DIO_READ+0xa2>
 3b8:	95 95       	asr	r25
 3ba:	87 95       	ror	r24
 3bc:	6a 95       	dec	r22
 3be:	e2 f7       	brpl	.-8      	; 0x3b8 <DIO_READ+0x9e>
 3c0:	08 95       	ret
 3c2:	80 e0       	ldi	r24, 0x00	; 0
 3c4:	08 95       	ret

000003c6 <DIO_PULLUP>:
 3c6:	82 34       	cpi	r24, 0x42	; 66
 3c8:	19 f1       	breq	.+70     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 3ca:	18 f4       	brcc	.+6      	; 0x3d2 <DIO_PULLUP+0xc>
 3cc:	81 34       	cpi	r24, 0x41	; 65
 3ce:	39 f0       	breq	.+14     	; 0x3de <DIO_PULLUP+0x18>
 3d0:	08 95       	ret
 3d2:	83 34       	cpi	r24, 0x43	; 67
 3d4:	b1 f1       	breq	.+108    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 3d6:	84 34       	cpi	r24, 0x44	; 68
 3d8:	09 f4       	brne	.+2      	; 0x3dc <DIO_PULLUP+0x16>
 3da:	4c c0       	rjmp	.+152    	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
 3dc:	08 95       	ret
 3de:	41 30       	cpi	r20, 0x01	; 1
 3e0:	59 f4       	brne	.+22     	; 0x3f8 <DIO_PULLUP+0x32>
 3e2:	2b b3       	in	r18, 0x1b	; 27
 3e4:	81 e0       	ldi	r24, 0x01	; 1
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	02 c0       	rjmp	.+4      	; 0x3ee <DIO_PULLUP+0x28>
 3ea:	88 0f       	add	r24, r24
 3ec:	99 1f       	adc	r25, r25
 3ee:	6a 95       	dec	r22
 3f0:	e2 f7       	brpl	.-8      	; 0x3ea <DIO_PULLUP+0x24>
 3f2:	82 2b       	or	r24, r18
 3f4:	8b bb       	out	0x1b, r24	; 27
 3f6:	08 95       	ret
 3f8:	2b b3       	in	r18, 0x1b	; 27
 3fa:	81 e0       	ldi	r24, 0x01	; 1
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	02 c0       	rjmp	.+4      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 400:	88 0f       	add	r24, r24
 402:	99 1f       	adc	r25, r25
 404:	6a 95       	dec	r22
 406:	e2 f7       	brpl	.-8      	; 0x400 <__LOCK_REGION_LENGTH__>
 408:	80 95       	com	r24
 40a:	82 23       	and	r24, r18
 40c:	8b bb       	out	0x1b, r24	; 27
 40e:	08 95       	ret
 410:	41 30       	cpi	r20, 0x01	; 1
 412:	59 f4       	brne	.+22     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 414:	28 b3       	in	r18, 0x18	; 24
 416:	81 e0       	ldi	r24, 0x01	; 1
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	02 c0       	rjmp	.+4      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 41c:	88 0f       	add	r24, r24
 41e:	99 1f       	adc	r25, r25
 420:	6a 95       	dec	r22
 422:	e2 f7       	brpl	.-8      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 424:	82 2b       	or	r24, r18
 426:	88 bb       	out	0x18, r24	; 24
 428:	08 95       	ret
 42a:	28 b3       	in	r18, 0x18	; 24
 42c:	81 e0       	ldi	r24, 0x01	; 1
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	02 c0       	rjmp	.+4      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 432:	88 0f       	add	r24, r24
 434:	99 1f       	adc	r25, r25
 436:	6a 95       	dec	r22
 438:	e2 f7       	brpl	.-8      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 43a:	80 95       	com	r24
 43c:	82 23       	and	r24, r18
 43e:	88 bb       	out	0x18, r24	; 24
 440:	08 95       	ret
 442:	41 30       	cpi	r20, 0x01	; 1
 444:	59 f4       	brne	.+22     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
 446:	25 b3       	in	r18, 0x15	; 21
 448:	81 e0       	ldi	r24, 0x01	; 1
 44a:	90 e0       	ldi	r25, 0x00	; 0
 44c:	02 c0       	rjmp	.+4      	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 44e:	88 0f       	add	r24, r24
 450:	99 1f       	adc	r25, r25
 452:	6a 95       	dec	r22
 454:	e2 f7       	brpl	.-8      	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 456:	82 2b       	or	r24, r18
 458:	85 bb       	out	0x15, r24	; 21
 45a:	08 95       	ret
 45c:	25 b3       	in	r18, 0x15	; 21
 45e:	81 e0       	ldi	r24, 0x01	; 1
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	02 c0       	rjmp	.+4      	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
 464:	88 0f       	add	r24, r24
 466:	99 1f       	adc	r25, r25
 468:	6a 95       	dec	r22
 46a:	e2 f7       	brpl	.-8      	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
 46c:	80 95       	com	r24
 46e:	82 23       	and	r24, r18
 470:	85 bb       	out	0x15, r24	; 21
 472:	08 95       	ret
 474:	41 30       	cpi	r20, 0x01	; 1
 476:	59 f4       	brne	.+22     	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
 478:	22 b3       	in	r18, 0x12	; 18
 47a:	81 e0       	ldi	r24, 0x01	; 1
 47c:	90 e0       	ldi	r25, 0x00	; 0
 47e:	02 c0       	rjmp	.+4      	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
 480:	88 0f       	add	r24, r24
 482:	99 1f       	adc	r25, r25
 484:	6a 95       	dec	r22
 486:	e2 f7       	brpl	.-8      	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
 488:	82 2b       	or	r24, r18
 48a:	82 bb       	out	0x12, r24	; 18
 48c:	08 95       	ret
 48e:	22 b3       	in	r18, 0x12	; 18
 490:	81 e0       	ldi	r24, 0x01	; 1
 492:	90 e0       	ldi	r25, 0x00	; 0
 494:	02 c0       	rjmp	.+4      	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
 496:	88 0f       	add	r24, r24
 498:	99 1f       	adc	r25, r25
 49a:	6a 95       	dec	r22
 49c:	e2 f7       	brpl	.-8      	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
 49e:	80 95       	com	r24
 4a0:	82 23       	and	r24, r18
 4a2:	82 bb       	out	0x12, r24	; 18
 4a4:	08 95       	ret

000004a6 <DIO_WRITE_HIGHNIBBLE>:

void DIO_WRITE_HIGHNIBBLE(unsigned char port, unsigned char value)
{
 4a6:	cf 93       	push	r28
 4a8:	df 93       	push	r29
 4aa:	d8 2f       	mov	r29, r24
 4ac:	c6 2f       	mov	r28, r22
	DIO_WRITE(port, 4, READ_BIT(value, 0));
 4ae:	46 2f       	mov	r20, r22
 4b0:	41 70       	andi	r20, 0x01	; 1
 4b2:	64 e0       	ldi	r22, 0x04	; 4
 4b4:	0e 94 1d 01 	call	0x23a	; 0x23a <DIO_WRITE>
	DIO_WRITE(port, 5, READ_BIT(value, 1));
 4b8:	c1 fb       	bst	r28, 1
 4ba:	44 27       	eor	r20, r20
 4bc:	40 f9       	bld	r20, 0
 4be:	65 e0       	ldi	r22, 0x05	; 5
 4c0:	8d 2f       	mov	r24, r29
 4c2:	0e 94 1d 01 	call	0x23a	; 0x23a <DIO_WRITE>
	DIO_WRITE(port, 6, READ_BIT(value, 2));
 4c6:	c2 fb       	bst	r28, 2
 4c8:	44 27       	eor	r20, r20
 4ca:	40 f9       	bld	r20, 0
 4cc:	66 e0       	ldi	r22, 0x06	; 6
 4ce:	8d 2f       	mov	r24, r29
 4d0:	0e 94 1d 01 	call	0x23a	; 0x23a <DIO_WRITE>
	DIO_WRITE(port, 7, READ_BIT(value, 3));
 4d4:	c3 fb       	bst	r28, 3
 4d6:	44 27       	eor	r20, r20
 4d8:	40 f9       	bld	r20, 0
 4da:	67 e0       	ldi	r22, 0x07	; 7
 4dc:	8d 2f       	mov	r24, r29
 4de:	0e 94 1d 01 	call	0x23a	; 0x23a <DIO_WRITE>
 4e2:	df 91       	pop	r29
 4e4:	cf 91       	pop	r28
 4e6:	08 95       	ret

000004e8 <EEPROM_Write>:
#include "MACROS.h"


void EEPROM_Write(unsigned short address, unsigned char data)
{
	EEARL = (unsigned char) address;
 4e8:	8e bb       	out	0x1e, r24	; 30
	EEARH = (unsigned char) (address>>8);
 4ea:	9f bb       	out	0x1f, r25	; 31
	
	EEDR = data;
 4ec:	6d bb       	out	0x1d, r22	; 29
	
	SET_BIT(EECR, EEMWE);
 4ee:	e2 9a       	sbi	0x1c, 2	; 28
	
	SET_BIT(EECR, EEWE);
 4f0:	e1 9a       	sbi	0x1c, 1	; 28
	
	while (READ_BIT(EECR, EEWE)==1);
 4f2:	e1 99       	sbic	0x1c, 1	; 28
 4f4:	fe cf       	rjmp	.-4      	; 0x4f2 <EEPROM_Write+0xa>
}
 4f6:	08 95       	ret

000004f8 <EEPROM_Read>:


char EEPROM_Read(unsigned short address)
{
	EEARL = (unsigned char) address;
 4f8:	8e bb       	out	0x1e, r24	; 30
	EEARH = (unsigned char) (address>>8);
 4fa:	9f bb       	out	0x1f, r25	; 31
	
	SET_BIT(EECR, EERE);
 4fc:	e0 9a       	sbi	0x1c, 0	; 28
	
	return EEDR;
 4fe:	8d b3       	in	r24, 0x1d	; 29
 500:	08 95       	ret

00000502 <Keypad_vinit>:
#include "Keypad_my.h"
#include "DIO.h"

void Keypad_vinit(void)
{
	DIO_SETPINDIR(USER_PORT, 0, 1);
 502:	41 e0       	ldi	r20, 0x01	; 1
 504:	60 e0       	ldi	r22, 0x00	; 0
 506:	84 e4       	ldi	r24, 0x44	; 68
 508:	0e 94 ad 00 	call	0x15a	; 0x15a <DIO_SETPINDIR>
	DIO_SETPINDIR(USER_PORT, 1, 1);
 50c:	41 e0       	ldi	r20, 0x01	; 1
 50e:	61 e0       	ldi	r22, 0x01	; 1
 510:	84 e4       	ldi	r24, 0x44	; 68
 512:	0e 94 ad 00 	call	0x15a	; 0x15a <DIO_SETPINDIR>
	DIO_SETPINDIR(USER_PORT, 2, 1);
 516:	41 e0       	ldi	r20, 0x01	; 1
 518:	62 e0       	ldi	r22, 0x02	; 2
 51a:	84 e4       	ldi	r24, 0x44	; 68
 51c:	0e 94 ad 00 	call	0x15a	; 0x15a <DIO_SETPINDIR>
	DIO_SETPINDIR(USER_PORT, 3, 1);
 520:	41 e0       	ldi	r20, 0x01	; 1
 522:	63 e0       	ldi	r22, 0x03	; 3
 524:	84 e4       	ldi	r24, 0x44	; 68
 526:	0e 94 ad 00 	call	0x15a	; 0x15a <DIO_SETPINDIR>
	DIO_SETPINDIR(USER_PORT, 4, 0);
 52a:	40 e0       	ldi	r20, 0x00	; 0
 52c:	64 e0       	ldi	r22, 0x04	; 4
 52e:	84 e4       	ldi	r24, 0x44	; 68
 530:	0e 94 ad 00 	call	0x15a	; 0x15a <DIO_SETPINDIR>
	DIO_SETPINDIR(USER_PORT, 5, 0);
 534:	40 e0       	ldi	r20, 0x00	; 0
 536:	65 e0       	ldi	r22, 0x05	; 5
 538:	84 e4       	ldi	r24, 0x44	; 68
 53a:	0e 94 ad 00 	call	0x15a	; 0x15a <DIO_SETPINDIR>
	DIO_SETPINDIR(USER_PORT, 6, 0);
 53e:	40 e0       	ldi	r20, 0x00	; 0
 540:	66 e0       	ldi	r22, 0x06	; 6
 542:	84 e4       	ldi	r24, 0x44	; 68
 544:	0e 94 ad 00 	call	0x15a	; 0x15a <DIO_SETPINDIR>
	DIO_SETPINDIR(USER_PORT, 7, 0);
 548:	40 e0       	ldi	r20, 0x00	; 0
 54a:	67 e0       	ldi	r22, 0x07	; 7
 54c:	84 e4       	ldi	r24, 0x44	; 68
 54e:	0e 94 ad 00 	call	0x15a	; 0x15a <DIO_SETPINDIR>
	DIO_PULLUP(USER_PORT, 4, 1);
 552:	41 e0       	ldi	r20, 0x01	; 1
 554:	64 e0       	ldi	r22, 0x04	; 4
 556:	84 e4       	ldi	r24, 0x44	; 68
 558:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <DIO_PULLUP>
	DIO_PULLUP(USER_PORT, 5, 1);
 55c:	41 e0       	ldi	r20, 0x01	; 1
 55e:	65 e0       	ldi	r22, 0x05	; 5
 560:	84 e4       	ldi	r24, 0x44	; 68
 562:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <DIO_PULLUP>
	DIO_PULLUP(USER_PORT, 6, 1);
 566:	41 e0       	ldi	r20, 0x01	; 1
 568:	66 e0       	ldi	r22, 0x06	; 6
 56a:	84 e4       	ldi	r24, 0x44	; 68
 56c:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <DIO_PULLUP>
	DIO_PULLUP(USER_PORT, 7, 1);
 570:	41 e0       	ldi	r20, 0x01	; 1
 572:	67 e0       	ldi	r22, 0x07	; 7
 574:	84 e4       	ldi	r24, 0x44	; 68
 576:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <DIO_PULLUP>
 57a:	08 95       	ret

0000057c <Keypad_vRead>:
}

unsigned char Keypad_vRead(void)
{
 57c:	0f 93       	push	r16
 57e:	1f 93       	push	r17
 580:	cf 93       	push	r28
 582:	df 93       	push	r29
 584:	cd b7       	in	r28, 0x3d	; 61
 586:	de b7       	in	r29, 0x3e	; 62
 588:	60 97       	sbiw	r28, 0x10	; 16
 58a:	0f b6       	in	r0, 0x3f	; 63
 58c:	f8 94       	cli
 58e:	de bf       	out	0x3e, r29	; 62
 590:	0f be       	out	0x3f, r0	; 63
 592:	cd bf       	out	0x3d, r28	; 61
	unsigned char arr[4][4]= {{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'C','0','=','+'}};
 594:	80 e1       	ldi	r24, 0x10	; 16
 596:	e0 e6       	ldi	r30, 0x60	; 96
 598:	f0 e0       	ldi	r31, 0x00	; 0
 59a:	de 01       	movw	r26, r28
 59c:	11 96       	adiw	r26, 0x01	; 1
 59e:	01 90       	ld	r0, Z+
 5a0:	0d 92       	st	X+, r0
 5a2:	8a 95       	dec	r24
 5a4:	e1 f7       	brne	.-8      	; 0x59e <Keypad_vRead+0x22>
	unsigned char row,column,x,return_val=0xff;
	
	for (row=0 ; row<4 ; row++)
 5a6:	00 e0       	ldi	r16, 0x00	; 0
	{
		DIO_WRITE(USER_PORT, 0, 1);
 5a8:	41 e0       	ldi	r20, 0x01	; 1
 5aa:	60 e0       	ldi	r22, 0x00	; 0
 5ac:	84 e4       	ldi	r24, 0x44	; 68
 5ae:	0e 94 1d 01 	call	0x23a	; 0x23a <DIO_WRITE>
		DIO_WRITE(USER_PORT, 1, 1);
 5b2:	41 e0       	ldi	r20, 0x01	; 1
 5b4:	61 e0       	ldi	r22, 0x01	; 1
 5b6:	84 e4       	ldi	r24, 0x44	; 68
 5b8:	0e 94 1d 01 	call	0x23a	; 0x23a <DIO_WRITE>
		DIO_WRITE(USER_PORT, 2, 1);
 5bc:	41 e0       	ldi	r20, 0x01	; 1
 5be:	62 e0       	ldi	r22, 0x02	; 2
 5c0:	84 e4       	ldi	r24, 0x44	; 68
 5c2:	0e 94 1d 01 	call	0x23a	; 0x23a <DIO_WRITE>
		DIO_WRITE(USER_PORT, 3, 1);
 5c6:	41 e0       	ldi	r20, 0x01	; 1
 5c8:	63 e0       	ldi	r22, 0x03	; 3
 5ca:	84 e4       	ldi	r24, 0x44	; 68
 5cc:	0e 94 1d 01 	call	0x23a	; 0x23a <DIO_WRITE>
		DIO_WRITE(USER_PORT, row, 0);
 5d0:	40 e0       	ldi	r20, 0x00	; 0
 5d2:	60 2f       	mov	r22, r16
 5d4:	84 e4       	ldi	r24, 0x44	; 68
 5d6:	0e 94 1d 01 	call	0x23a	; 0x23a <DIO_WRITE>
		for (column=0 ; column<4 ; column++)
 5da:	10 e0       	ldi	r17, 0x00	; 0
		{
			x=DIO_READ(USER_PORT, (column+4));
 5dc:	64 e0       	ldi	r22, 0x04	; 4
 5de:	61 0f       	add	r22, r17
 5e0:	84 e4       	ldi	r24, 0x44	; 68
 5e2:	0e 94 8d 01 	call	0x31a	; 0x31a <DIO_READ>
			if (x==0)
 5e6:	81 11       	cpse	r24, r1
 5e8:	0d c0       	rjmp	.+26     	; 0x604 <Keypad_vRead+0x88>
			{
				return_val=arr[row][column];
 5ea:	e1 e0       	ldi	r30, 0x01	; 1
 5ec:	f0 e0       	ldi	r31, 0x00	; 0
 5ee:	ec 0f       	add	r30, r28
 5f0:	fd 1f       	adc	r31, r29
 5f2:	84 e0       	ldi	r24, 0x04	; 4
 5f4:	08 9f       	mul	r16, r24
 5f6:	e0 0d       	add	r30, r0
 5f8:	f1 1d       	adc	r31, r1
 5fa:	11 24       	eor	r1, r1
 5fc:	e1 0f       	add	r30, r17
 5fe:	f1 1d       	adc	r31, r1
 600:	80 81       	ld	r24, Z
 602:	07 c0       	rjmp	.+14     	; 0x612 <Keypad_vRead+0x96>
		DIO_WRITE(USER_PORT, 0, 1);
		DIO_WRITE(USER_PORT, 1, 1);
		DIO_WRITE(USER_PORT, 2, 1);
		DIO_WRITE(USER_PORT, 3, 1);
		DIO_WRITE(USER_PORT, row, 0);
		for (column=0 ; column<4 ; column++)
 604:	1f 5f       	subi	r17, 0xFF	; 255
 606:	14 30       	cpi	r17, 0x04	; 4
 608:	49 f7       	brne	.-46     	; 0x5dc <Keypad_vRead+0x60>
unsigned char Keypad_vRead(void)
{
	unsigned char arr[4][4]= {{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'C','0','=','+'}};
	unsigned char row,column,x,return_val=0xff;
	
	for (row=0 ; row<4 ; row++)
 60a:	0f 5f       	subi	r16, 0xFF	; 255
 60c:	04 30       	cpi	r16, 0x04	; 4
 60e:	61 f6       	brne	.-104    	; 0x5a8 <Keypad_vRead+0x2c>
 610:	8f ef       	ldi	r24, 0xFF	; 255
		{
			break;
		}
	}
	return return_val;
 612:	60 96       	adiw	r28, 0x10	; 16
 614:	0f b6       	in	r0, 0x3f	; 63
 616:	f8 94       	cli
 618:	de bf       	out	0x3e, r29	; 62
 61a:	0f be       	out	0x3f, r0	; 63
 61c:	cd bf       	out	0x3d, r28	; 61
 61e:	df 91       	pop	r29
 620:	cf 91       	pop	r28
 622:	1f 91       	pop	r17
 624:	0f 91       	pop	r16
 626:	08 95       	ret

00000628 <send_falling_edge>:
	#endif
}

static void send_falling_edge(void)
{
	DIO_WRITE('B',EN,1);
 628:	41 e0       	ldi	r20, 0x01	; 1
 62a:	60 e0       	ldi	r22, 0x00	; 0
 62c:	82 e4       	ldi	r24, 0x42	; 66
 62e:	0e 94 1d 01 	call	0x23a	; 0x23a <DIO_WRITE>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 632:	8f e8       	ldi	r24, 0x8F	; 143
 634:	91 e0       	ldi	r25, 0x01	; 1
 636:	01 97       	sbiw	r24, 0x01	; 1
 638:	f1 f7       	brne	.-4      	; 0x636 <send_falling_edge+0xe>
 63a:	00 c0       	rjmp	.+0      	; 0x63c <send_falling_edge+0x14>
 63c:	00 00       	nop
	_delay_ms(2);
	DIO_WRITE('B',EN,0);
 63e:	40 e0       	ldi	r20, 0x00	; 0
 640:	60 e0       	ldi	r22, 0x00	; 0
 642:	82 e4       	ldi	r24, 0x42	; 66
 644:	0e 94 1d 01 	call	0x23a	; 0x23a <DIO_WRITE>
 648:	8f e8       	ldi	r24, 0x8F	; 143
 64a:	91 e0       	ldi	r25, 0x01	; 1
 64c:	01 97       	sbiw	r24, 0x01	; 1
 64e:	f1 f7       	brne	.-4      	; 0x64c <send_falling_edge+0x24>
 650:	00 c0       	rjmp	.+0      	; 0x652 <send_falling_edge+0x2a>
 652:	00 00       	nop
 654:	08 95       	ret

00000656 <LCD_send_cmd>:
	_delay_ms(2);
}

void LCD_send_cmd(char cmd)
{
 656:	cf 93       	push	r28
 658:	c8 2f       	mov	r28, r24
	#if defined eight_bit
	DIO_PORT_WRITE('A', cmd);
	DIO_WRITE('B',RS,0);
	send_falling_edge();
	#elif defined four_bit
	DIO_WRITE_HIGHNIBBLE('A', cmd>>4);
 65a:	68 2f       	mov	r22, r24
 65c:	62 95       	swap	r22
 65e:	6f 70       	andi	r22, 0x0F	; 15
 660:	81 e4       	ldi	r24, 0x41	; 65
 662:	0e 94 53 02 	call	0x4a6	; 0x4a6 <DIO_WRITE_HIGHNIBBLE>
	DIO_WRITE('B', RS, 0);
 666:	40 e0       	ldi	r20, 0x00	; 0
 668:	61 e0       	ldi	r22, 0x01	; 1
 66a:	82 e4       	ldi	r24, 0x42	; 66
 66c:	0e 94 1d 01 	call	0x23a	; 0x23a <DIO_WRITE>
	send_falling_edge();
 670:	0e 94 14 03 	call	0x628	; 0x628 <send_falling_edge>
	DIO_WRITE_HIGHNIBBLE('A', cmd);
 674:	6c 2f       	mov	r22, r28
 676:	81 e4       	ldi	r24, 0x41	; 65
 678:	0e 94 53 02 	call	0x4a6	; 0x4a6 <DIO_WRITE_HIGHNIBBLE>
	DIO_WRITE('B', RS, 0);
 67c:	40 e0       	ldi	r20, 0x00	; 0
 67e:	61 e0       	ldi	r22, 0x01	; 1
 680:	82 e4       	ldi	r24, 0x42	; 66
 682:	0e 94 1d 01 	call	0x23a	; 0x23a <DIO_WRITE>
	send_falling_edge();
 686:	0e 94 14 03 	call	0x628	; 0x628 <send_falling_edge>
 68a:	87 ec       	ldi	r24, 0xC7	; 199
 68c:	90 e0       	ldi	r25, 0x00	; 0
 68e:	01 97       	sbiw	r24, 0x01	; 1
 690:	f1 f7       	brne	.-4      	; 0x68e <LCD_send_cmd+0x38>
 692:	00 c0       	rjmp	.+0      	; 0x694 <LCD_send_cmd+0x3e>
 694:	00 00       	nop
	#endif
	_delay_ms(1);
}
 696:	cf 91       	pop	r28
 698:	08 95       	ret

0000069a <LCD_init>:
 69a:	8f e3       	ldi	r24, 0x3F	; 63
 69c:	9c e9       	ldi	r25, 0x9C	; 156
 69e:	01 97       	sbiw	r24, 0x01	; 1
 6a0:	f1 f7       	brne	.-4      	; 0x69e <LCD_init+0x4>
 6a2:	00 c0       	rjmp	.+0      	; 0x6a4 <LCD_init+0xa>
 6a4:	00 00       	nop
	LCD_send_cmd(CLEAR_SCREEN);
	_delay_ms(10);
	LCD_send_cmd(ENTERY_MODE);
	_delay_ms(1);
	#elif defined four_bit
	DIO_SETPINDIR('A',4,1);
 6a6:	41 e0       	ldi	r20, 0x01	; 1
 6a8:	64 e0       	ldi	r22, 0x04	; 4
 6aa:	81 e4       	ldi	r24, 0x41	; 65
 6ac:	0e 94 ad 00 	call	0x15a	; 0x15a <DIO_SETPINDIR>
	DIO_SETPINDIR('A',5,1);
 6b0:	41 e0       	ldi	r20, 0x01	; 1
 6b2:	65 e0       	ldi	r22, 0x05	; 5
 6b4:	81 e4       	ldi	r24, 0x41	; 65
 6b6:	0e 94 ad 00 	call	0x15a	; 0x15a <DIO_SETPINDIR>
	DIO_SETPINDIR('A',6,1);
 6ba:	41 e0       	ldi	r20, 0x01	; 1
 6bc:	66 e0       	ldi	r22, 0x06	; 6
 6be:	81 e4       	ldi	r24, 0x41	; 65
 6c0:	0e 94 ad 00 	call	0x15a	; 0x15a <DIO_SETPINDIR>
	DIO_SETPINDIR('A',7,1);
 6c4:	41 e0       	ldi	r20, 0x01	; 1
 6c6:	67 e0       	ldi	r22, 0x07	; 7
 6c8:	81 e4       	ldi	r24, 0x41	; 65
 6ca:	0e 94 ad 00 	call	0x15a	; 0x15a <DIO_SETPINDIR>
	DIO_SETPINDIR('B',0,1);
 6ce:	41 e0       	ldi	r20, 0x01	; 1
 6d0:	60 e0       	ldi	r22, 0x00	; 0
 6d2:	82 e4       	ldi	r24, 0x42	; 66
 6d4:	0e 94 ad 00 	call	0x15a	; 0x15a <DIO_SETPINDIR>
	DIO_SETPINDIR('B',1,1);
 6d8:	41 e0       	ldi	r20, 0x01	; 1
 6da:	61 e0       	ldi	r22, 0x01	; 1
 6dc:	82 e4       	ldi	r24, 0x42	; 66
 6de:	0e 94 ad 00 	call	0x15a	; 0x15a <DIO_SETPINDIR>
	DIO_SETPINDIR('B',2,1);
 6e2:	41 e0       	ldi	r20, 0x01	; 1
 6e4:	62 e0       	ldi	r22, 0x02	; 2
 6e6:	82 e4       	ldi	r24, 0x42	; 66
 6e8:	0e 94 ad 00 	call	0x15a	; 0x15a <DIO_SETPINDIR>
	DIO_WRITE('B',2,0);
 6ec:	40 e0       	ldi	r20, 0x00	; 0
 6ee:	62 e0       	ldi	r22, 0x02	; 2
 6f0:	82 e4       	ldi	r24, 0x42	; 66
 6f2:	0e 94 1d 01 	call	0x23a	; 0x23a <DIO_WRITE>
	LCD_send_cmd(RETURN_HOME);
 6f6:	82 e0       	ldi	r24, 0x02	; 2
 6f8:	0e 94 2b 03 	call	0x656	; 0x656 <LCD_send_cmd>
 6fc:	8f ec       	ldi	r24, 0xCF	; 207
 6fe:	97 e0       	ldi	r25, 0x07	; 7
 700:	01 97       	sbiw	r24, 0x01	; 1
 702:	f1 f7       	brne	.-4      	; 0x700 <LCD_init+0x66>
 704:	00 c0       	rjmp	.+0      	; 0x706 <LCD_init+0x6c>
 706:	00 00       	nop
	_delay_ms(10);
	LCD_send_cmd(FOUR_BIT_MODE);
 708:	88 e2       	ldi	r24, 0x28	; 40
 70a:	0e 94 2b 03 	call	0x656	; 0x656 <LCD_send_cmd>
 70e:	87 ec       	ldi	r24, 0xC7	; 199
 710:	90 e0       	ldi	r25, 0x00	; 0
 712:	01 97       	sbiw	r24, 0x01	; 1
 714:	f1 f7       	brne	.-4      	; 0x712 <LCD_init+0x78>
 716:	00 c0       	rjmp	.+0      	; 0x718 <LCD_init+0x7e>
 718:	00 00       	nop
	_delay_ms(1);
	LCD_send_cmd(CURSOR_ON_DESPLAY_ON);
 71a:	8e e0       	ldi	r24, 0x0E	; 14
 71c:	0e 94 2b 03 	call	0x656	; 0x656 <LCD_send_cmd>
 720:	87 ec       	ldi	r24, 0xC7	; 199
 722:	90 e0       	ldi	r25, 0x00	; 0
 724:	01 97       	sbiw	r24, 0x01	; 1
 726:	f1 f7       	brne	.-4      	; 0x724 <LCD_init+0x8a>
 728:	00 c0       	rjmp	.+0      	; 0x72a <LCD_init+0x90>
 72a:	00 00       	nop
	_delay_ms(1);
	LCD_send_cmd(CLEAR_SCREEN);
 72c:	81 e0       	ldi	r24, 0x01	; 1
 72e:	0e 94 2b 03 	call	0x656	; 0x656 <LCD_send_cmd>
 732:	8f ec       	ldi	r24, 0xCF	; 207
 734:	97 e0       	ldi	r25, 0x07	; 7
 736:	01 97       	sbiw	r24, 0x01	; 1
 738:	f1 f7       	brne	.-4      	; 0x736 <LCD_init+0x9c>
 73a:	00 c0       	rjmp	.+0      	; 0x73c <LCD_init+0xa2>
 73c:	00 00       	nop
	_delay_ms(10);
	LCD_send_cmd(ENTERY_MODE);
 73e:	86 e0       	ldi	r24, 0x06	; 6
 740:	0e 94 2b 03 	call	0x656	; 0x656 <LCD_send_cmd>
 744:	87 ec       	ldi	r24, 0xC7	; 199
 746:	90 e0       	ldi	r25, 0x00	; 0
 748:	01 97       	sbiw	r24, 0x01	; 1
 74a:	f1 f7       	brne	.-4      	; 0x748 <LCD_init+0xae>
 74c:	00 c0       	rjmp	.+0      	; 0x74e <LCD_init+0xb4>
 74e:	00 00       	nop
 750:	08 95       	ret

00000752 <LCD_send_char>:
	#endif
	_delay_ms(1);
}

void LCD_send_char(char data)
{
 752:	cf 93       	push	r28
 754:	c8 2f       	mov	r28, r24
	#if defined eight_bit
	DIO_PORT_WRITE('A', data);
	DIO_WRITE('B',RS,1);
	send_falling_edge();
	#elif defined four_bit
	DIO_WRITE_HIGHNIBBLE('A', data>>4);
 756:	68 2f       	mov	r22, r24
 758:	62 95       	swap	r22
 75a:	6f 70       	andi	r22, 0x0F	; 15
 75c:	81 e4       	ldi	r24, 0x41	; 65
 75e:	0e 94 53 02 	call	0x4a6	; 0x4a6 <DIO_WRITE_HIGHNIBBLE>
	DIO_WRITE('B', RS, 1);
 762:	41 e0       	ldi	r20, 0x01	; 1
 764:	61 e0       	ldi	r22, 0x01	; 1
 766:	82 e4       	ldi	r24, 0x42	; 66
 768:	0e 94 1d 01 	call	0x23a	; 0x23a <DIO_WRITE>
	send_falling_edge();
 76c:	0e 94 14 03 	call	0x628	; 0x628 <send_falling_edge>
	DIO_WRITE_HIGHNIBBLE('A', data);
 770:	6c 2f       	mov	r22, r28
 772:	81 e4       	ldi	r24, 0x41	; 65
 774:	0e 94 53 02 	call	0x4a6	; 0x4a6 <DIO_WRITE_HIGHNIBBLE>
	DIO_WRITE('B', RS, 1);
 778:	41 e0       	ldi	r20, 0x01	; 1
 77a:	61 e0       	ldi	r22, 0x01	; 1
 77c:	82 e4       	ldi	r24, 0x42	; 66
 77e:	0e 94 1d 01 	call	0x23a	; 0x23a <DIO_WRITE>
	send_falling_edge();
 782:	0e 94 14 03 	call	0x628	; 0x628 <send_falling_edge>
	#endif
}
 786:	cf 91       	pop	r28
 788:	08 95       	ret

0000078a <LCD_send_string>:

void LCD_send_string(char* data)
{
 78a:	cf 93       	push	r28
 78c:	df 93       	push	r29
 78e:	ec 01       	movw	r28, r24
	while ((*data) != '\0')
 790:	88 81       	ld	r24, Y
 792:	88 23       	and	r24, r24
 794:	31 f0       	breq	.+12     	; 0x7a2 <LCD_send_string+0x18>
 796:	21 96       	adiw	r28, 0x01	; 1
	{
		LCD_send_char(*data);
 798:	0e 94 a9 03 	call	0x752	; 0x752 <LCD_send_char>
	#endif
}

void LCD_send_string(char* data)
{
	while ((*data) != '\0')
 79c:	89 91       	ld	r24, Y+
 79e:	81 11       	cpse	r24, r1
 7a0:	fb cf       	rjmp	.-10     	; 0x798 <LCD_send_string+0xe>
	{
		LCD_send_char(*data);
		data++;
	}
}
 7a2:	df 91       	pop	r29
 7a4:	cf 91       	pop	r28
 7a6:	08 95       	ret

000007a8 <LCD_clear_screen>:

void LCD_clear_screen(void)
{
	LCD_send_cmd(CLEAR_SCREEN);
 7a8:	81 e0       	ldi	r24, 0x01	; 1
 7aa:	0e 94 2b 03 	call	0x656	; 0x656 <LCD_send_cmd>
 7ae:	8f ec       	ldi	r24, 0xCF	; 207
 7b0:	97 e0       	ldi	r25, 0x07	; 7
 7b2:	01 97       	sbiw	r24, 0x01	; 1
 7b4:	f1 f7       	brne	.-4      	; 0x7b2 <LCD_clear_screen+0xa>
 7b6:	00 c0       	rjmp	.+0      	; 0x7b8 <LCD_clear_screen+0x10>
 7b8:	00 00       	nop
 7ba:	08 95       	ret

000007bc <LCD_move_cursor>:
}

void LCD_move_cursor(char row, char column)
{
	char data=0;
	if (row>2 || row<1 || column>16 || column<1)
 7bc:	9f ef       	ldi	r25, 0xFF	; 255
 7be:	98 0f       	add	r25, r24
 7c0:	92 30       	cpi	r25, 0x02	; 2
 7c2:	70 f4       	brcc	.+28     	; 0x7e0 <LCD_move_cursor+0x24>
 7c4:	9f ef       	ldi	r25, 0xFF	; 255
 7c6:	96 0f       	add	r25, r22
 7c8:	90 31       	cpi	r25, 0x10	; 16
 7ca:	60 f4       	brcc	.+24     	; 0x7e4 <LCD_move_cursor+0x28>
	{
		data=0x80;
	}
	else if (row==1)
 7cc:	81 30       	cpi	r24, 0x01	; 1
 7ce:	19 f4       	brne	.+6      	; 0x7d6 <LCD_move_cursor+0x1a>
	{
		data = 0x80 + column - 1;
 7d0:	8f e7       	ldi	r24, 0x7F	; 127
 7d2:	86 0f       	add	r24, r22
 7d4:	0a c0       	rjmp	.+20     	; 0x7ea <LCD_move_cursor+0x2e>
	}
	else if (row==2)
 7d6:	82 30       	cpi	r24, 0x02	; 2
 7d8:	39 f4       	brne	.+14     	; 0x7e8 <LCD_move_cursor+0x2c>
	{
		data = 0xC0 + column - 1;
 7da:	8f eb       	ldi	r24, 0xBF	; 191
 7dc:	86 0f       	add	r24, r22
 7de:	05 c0       	rjmp	.+10     	; 0x7ea <LCD_move_cursor+0x2e>
void LCD_move_cursor(char row, char column)
{
	char data=0;
	if (row>2 || row<1 || column>16 || column<1)
	{
		data=0x80;
 7e0:	80 e8       	ldi	r24, 0x80	; 128
 7e2:	03 c0       	rjmp	.+6      	; 0x7ea <LCD_move_cursor+0x2e>
 7e4:	80 e8       	ldi	r24, 0x80	; 128
 7e6:	01 c0       	rjmp	.+2      	; 0x7ea <LCD_move_cursor+0x2e>
	_delay_ms(10);
}

void LCD_move_cursor(char row, char column)
{
	char data=0;
 7e8:	80 e0       	ldi	r24, 0x00	; 0
	}
	else if (row==2)
	{
		data = 0xC0 + column - 1;
	}
	LCD_send_cmd(data);
 7ea:	0e 94 2b 03 	call	0x656	; 0x656 <LCD_send_cmd>
 7ee:	87 ec       	ldi	r24, 0xC7	; 199
 7f0:	90 e0       	ldi	r25, 0x00	; 0
 7f2:	01 97       	sbiw	r24, 0x01	; 1
 7f4:	f1 f7       	brne	.-4      	; 0x7f2 <LCD_move_cursor+0x36>
 7f6:	00 c0       	rjmp	.+0      	; 0x7f8 <LCD_move_cursor+0x3c>
 7f8:	00 00       	nop
 7fa:	08 95       	ret

000007fc <main>:
#define PASSWORD3 0x23
#define PASSWORD4 0x24
#define TRIES 2

int main(void)
{
 7fc:	ef 92       	push	r14
 7fe:	ff 92       	push	r15
 800:	0f 93       	push	r16
 802:	1f 93       	push	r17
 804:	cf 93       	push	r28
 806:	df 93       	push	r29
 808:	00 d0       	rcall	.+0      	; 0x80a <main+0xe>
 80a:	00 d0       	rcall	.+0      	; 0x80c <main+0x10>
 80c:	cd b7       	in	r28, 0x3d	; 61
 80e:	de b7       	in	r29, 0x3e	; 62
    LCD_init();
 810:	0e 94 4d 03 	call	0x69a	; 0x69a <LCD_init>
	Keypad_vinit();
 814:	0e 94 81 02 	call	0x502	; 0x502 <Keypad_vinit>
	char flag=0;
	if (EEPROM_Read(PASS_SET) == 0xff)
 818:	80 e2       	ldi	r24, 0x20	; 32
 81a:	90 e0       	ldi	r25, 0x00	; 0
 81c:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <EEPROM_Read>
 820:	8f 3f       	cpi	r24, 0xFF	; 255
 822:	09 f0       	breq	.+2      	; 0x826 <main+0x2a>
 824:	c3 c0       	rjmp	.+390    	; 0x9ac <__stack+0x14d>
	{
		LCD_send_string("PASS SET:");
 826:	80 e7       	ldi	r24, 0x70	; 112
 828:	90 e0       	ldi	r25, 0x00	; 0
 82a:	0e 94 c5 03 	call	0x78a	; 0x78a <LCD_send_string>
 82e:	0f 2e       	mov	r0, r31
 830:	f1 e2       	ldi	r31, 0x21	; 33
 832:	ef 2e       	mov	r14, r31
 834:	f1 2c       	mov	r15, r1
 836:	f0 2d       	mov	r31, r0
		char i, value;
		for (i=0 ; i<=3 ; i++)
		{
			do 
			{
				value = Keypad_vRead();
 838:	0e 94 be 02 	call	0x57c	; 0x57c <Keypad_vRead>
 83c:	18 2f       	mov	r17, r24
			} while (value == 0xff);
 83e:	8f 3f       	cpi	r24, 0xFF	; 255
 840:	d9 f3       	breq	.-10     	; 0x838 <main+0x3c>
			EEPROM_Write(PASSWORD1+i, value);
 842:	68 2f       	mov	r22, r24
 844:	c7 01       	movw	r24, r14
 846:	0e 94 74 02 	call	0x4e8	; 0x4e8 <EEPROM_Write>
			LCD_send_char(value);
 84a:	81 2f       	mov	r24, r17
 84c:	0e 94 a9 03 	call	0x752	; 0x752 <LCD_send_char>
 850:	2f ef       	ldi	r18, 0xFF	; 255
 852:	84 e3       	ldi	r24, 0x34	; 52
 854:	9c e0       	ldi	r25, 0x0C	; 12
 856:	21 50       	subi	r18, 0x01	; 1
 858:	80 40       	sbci	r24, 0x00	; 0
 85a:	90 40       	sbci	r25, 0x00	; 0
 85c:	e1 f7       	brne	.-8      	; 0x856 <main+0x5a>
 85e:	00 c0       	rjmp	.+0      	; 0x860 <__stack+0x1>
 860:	00 00       	nop
			_delay_ms(500);
			LCD_move_cursor(1,10+i);
 862:	69 ee       	ldi	r22, 0xE9	; 233
 864:	6e 0d       	add	r22, r14
 866:	81 e0       	ldi	r24, 0x01	; 1
 868:	0e 94 de 03 	call	0x7bc	; 0x7bc <LCD_move_cursor>
			LCD_send_char('*');
 86c:	8a e2       	ldi	r24, 0x2A	; 42
 86e:	0e 94 a9 03 	call	0x752	; 0x752 <LCD_send_char>
 872:	ef ef       	ldi	r30, 0xFF	; 255
 874:	ee 1a       	sub	r14, r30
 876:	fe 0a       	sbc	r15, r30
	char flag=0;
	if (EEPROM_Read(PASS_SET) == 0xff)
	{
		LCD_send_string("PASS SET:");
		char i, value;
		for (i=0 ; i<=3 ; i++)
 878:	f5 e2       	ldi	r31, 0x25	; 37
 87a:	ef 16       	cp	r14, r31
 87c:	f1 04       	cpc	r15, r1
 87e:	e1 f6       	brne	.-72     	; 0x838 <main+0x3c>
			_delay_ms(500);
			LCD_move_cursor(1,10+i);
			LCD_send_char('*');
			
		}
		EEPROM_Write(PASS_SET, 0x00);
 880:	60 e0       	ldi	r22, 0x00	; 0
 882:	80 e2       	ldi	r24, 0x20	; 32
 884:	90 e0       	ldi	r25, 0x00	; 0
 886:	0e 94 74 02 	call	0x4e8	; 0x4e8 <EEPROM_Write>
 88a:	90 c0       	rjmp	.+288    	; 0x9ac <__stack+0x14d>
	}
	char tries=TRIES;
    while (flag==0) 
    {
		char arr[4];
		LCD_clear_screen();
 88c:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <LCD_clear_screen>
		LCD_send_string("ENTER PASS:");
 890:	8a e7       	ldi	r24, 0x7A	; 122
 892:	90 e0       	ldi	r25, 0x00	; 0
 894:	0e 94 c5 03 	call	0x78a	; 0x78a <LCD_send_string>
 898:	ce 01       	movw	r24, r28
 89a:	01 96       	adiw	r24, 0x01	; 1
 89c:	7c 01       	movw	r14, r24
 89e:	1c e0       	ldi	r17, 0x0C	; 12
		char i, value;
		for (i=0 ; i<=3 ; i++)
		{
			do
			{
				value = Keypad_vRead();
 8a0:	0e 94 be 02 	call	0x57c	; 0x57c <Keypad_vRead>
			} while (value == 0xff);
 8a4:	8f 3f       	cpi	r24, 0xFF	; 255
 8a6:	e1 f3       	breq	.-8      	; 0x8a0 <__stack+0x41>
			arr[i] = value;
 8a8:	f7 01       	movw	r30, r14
 8aa:	81 93       	st	Z+, r24
 8ac:	7f 01       	movw	r14, r30
			LCD_send_char(value);
 8ae:	0e 94 a9 03 	call	0x752	; 0x752 <LCD_send_char>
 8b2:	ff ef       	ldi	r31, 0xFF	; 255
 8b4:	24 e3       	ldi	r18, 0x34	; 52
 8b6:	8c e0       	ldi	r24, 0x0C	; 12
 8b8:	f1 50       	subi	r31, 0x01	; 1
 8ba:	20 40       	sbci	r18, 0x00	; 0
 8bc:	80 40       	sbci	r24, 0x00	; 0
 8be:	e1 f7       	brne	.-8      	; 0x8b8 <__stack+0x59>
 8c0:	00 c0       	rjmp	.+0      	; 0x8c2 <__stack+0x63>
 8c2:	00 00       	nop
			_delay_ms(500);
			LCD_move_cursor(1,12+i);
 8c4:	61 2f       	mov	r22, r17
 8c6:	81 e0       	ldi	r24, 0x01	; 1
 8c8:	0e 94 de 03 	call	0x7bc	; 0x7bc <LCD_move_cursor>
			LCD_send_char('*');
 8cc:	8a e2       	ldi	r24, 0x2A	; 42
 8ce:	0e 94 a9 03 	call	0x752	; 0x752 <LCD_send_char>
 8d2:	1f 5f       	subi	r17, 0xFF	; 255
    {
		char arr[4];
		LCD_clear_screen();
		LCD_send_string("ENTER PASS:");
		char i, value;
		for (i=0 ; i<=3 ; i++)
 8d4:	10 31       	cpi	r17, 0x10	; 16
 8d6:	21 f7       	brne	.-56     	; 0x8a0 <__stack+0x41>
			_delay_ms(500);
			LCD_move_cursor(1,12+i);
			LCD_send_char('*');
			
		}
		if (arr[0]==EEPROM_Read(PASSWORD1) && arr[1]==EEPROM_Read(PASSWORD2) && arr[2]==EEPROM_Read(PASSWORD3) && arr[3]==EEPROM_Read(PASSWORD4))
 8d8:	19 81       	ldd	r17, Y+1	; 0x01
 8da:	81 e2       	ldi	r24, 0x21	; 33
 8dc:	90 e0       	ldi	r25, 0x00	; 0
 8de:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <EEPROM_Read>
 8e2:	18 13       	cpse	r17, r24
 8e4:	24 c0       	rjmp	.+72     	; 0x92e <__stack+0xcf>
 8e6:	1a 81       	ldd	r17, Y+2	; 0x02
 8e8:	82 e2       	ldi	r24, 0x22	; 34
 8ea:	90 e0       	ldi	r25, 0x00	; 0
 8ec:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <EEPROM_Read>
 8f0:	18 13       	cpse	r17, r24
 8f2:	1d c0       	rjmp	.+58     	; 0x92e <__stack+0xcf>
 8f4:	1b 81       	ldd	r17, Y+3	; 0x03
 8f6:	83 e2       	ldi	r24, 0x23	; 35
 8f8:	90 e0       	ldi	r25, 0x00	; 0
 8fa:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <EEPROM_Read>
 8fe:	18 13       	cpse	r17, r24
 900:	16 c0       	rjmp	.+44     	; 0x92e <__stack+0xcf>
 902:	1c 81       	ldd	r17, Y+4	; 0x04
 904:	84 e2       	ldi	r24, 0x24	; 36
 906:	90 e0       	ldi	r25, 0x00	; 0
 908:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <EEPROM_Read>
 90c:	18 13       	cpse	r17, r24
 90e:	0f c0       	rjmp	.+30     	; 0x92e <__stack+0xcf>
		{
			LCD_clear_screen();
 910:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <LCD_clear_screen>
			LCD_send_string("RIGHT PASS");
 914:	86 e8       	ldi	r24, 0x86	; 134
 916:	90 e0       	ldi	r25, 0x00	; 0
 918:	0e 94 c5 03 	call	0x78a	; 0x78a <LCD_send_string>
			LCD_move_cursor(2,1);
 91c:	61 e0       	ldi	r22, 0x01	; 1
 91e:	82 e0       	ldi	r24, 0x02	; 2
 920:	0e 94 de 03 	call	0x7bc	; 0x7bc <LCD_move_cursor>
			LCD_send_string("SAFE IS OPENED");
 924:	81 e9       	ldi	r24, 0x91	; 145
 926:	90 e0       	ldi	r25, 0x00	; 0
 928:	0e 94 c5 03 	call	0x78a	; 0x78a <LCD_send_string>
			flag=1;
 92c:	41 c0       	rjmp	.+130    	; 0x9b0 <__stack+0x151>
		} 
		else
		{
			if (tries>0)
 92e:	0f 32       	cpi	r16, 0x2F	; 47
 930:	29 f1       	breq	.+74     	; 0x97c <__stack+0x11d>
			{
				tries--;
				LCD_clear_screen();
 932:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <LCD_clear_screen>
				LCD_send_string("WRONG PASSWORD");
 936:	80 ea       	ldi	r24, 0xA0	; 160
 938:	90 e0       	ldi	r25, 0x00	; 0
 93a:	0e 94 c5 03 	call	0x78a	; 0x78a <LCD_send_string>
 93e:	9f ef       	ldi	r25, 0xFF	; 255
 940:	e9 e6       	ldi	r30, 0x69	; 105
 942:	f8 e1       	ldi	r31, 0x18	; 24
 944:	91 50       	subi	r25, 0x01	; 1
 946:	e0 40       	sbci	r30, 0x00	; 0
 948:	f0 40       	sbci	r31, 0x00	; 0
 94a:	e1 f7       	brne	.-8      	; 0x944 <__stack+0xe5>
 94c:	00 c0       	rjmp	.+0      	; 0x94e <__stack+0xef>
 94e:	00 00       	nop
				_delay_ms(1000);
				LCD_move_cursor(2,1);
 950:	61 e0       	ldi	r22, 0x01	; 1
 952:	82 e0       	ldi	r24, 0x02	; 2
 954:	0e 94 de 03 	call	0x7bc	; 0x7bc <LCD_move_cursor>
				LCD_send_string("NUM OF TRIE:");
 958:	8f ea       	ldi	r24, 0xAF	; 175
 95a:	90 e0       	ldi	r25, 0x00	; 0
 95c:	0e 94 c5 03 	call	0x78a	; 0x78a <LCD_send_string>
				LCD_send_char(tries+48);
 960:	80 2f       	mov	r24, r16
 962:	0e 94 a9 03 	call	0x752	; 0x752 <LCD_send_char>
 966:	2f ef       	ldi	r18, 0xFF	; 255
 968:	89 e6       	ldi	r24, 0x69	; 105
 96a:	98 e1       	ldi	r25, 0x18	; 24
 96c:	21 50       	subi	r18, 0x01	; 1
 96e:	80 40       	sbci	r24, 0x00	; 0
 970:	90 40       	sbci	r25, 0x00	; 0
 972:	e1 f7       	brne	.-8      	; 0x96c <__stack+0x10d>
 974:	00 c0       	rjmp	.+0      	; 0x976 <__stack+0x117>
 976:	00 00       	nop
 978:	01 50       	subi	r16, 0x01	; 1
 97a:	88 cf       	rjmp	.-240    	; 0x88c <__stack+0x2d>
				_delay_ms(1000);
				
			} 
			else
			{
				LCD_clear_screen();
 97c:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <LCD_clear_screen>
				LCD_send_string("WRONG PASSWORD");
 980:	80 ea       	ldi	r24, 0xA0	; 160
 982:	90 e0       	ldi	r25, 0x00	; 0
 984:	0e 94 c5 03 	call	0x78a	; 0x78a <LCD_send_string>
				LCD_move_cursor(2,1);
 988:	61 e0       	ldi	r22, 0x01	; 1
 98a:	82 e0       	ldi	r24, 0x02	; 2
 98c:	0e 94 de 03 	call	0x7bc	; 0x7bc <LCD_move_cursor>
				LCD_send_string("SAFE CLOSED");
 990:	8c eb       	ldi	r24, 0xBC	; 188
 992:	90 e0       	ldi	r25, 0x00	; 0
 994:	0e 94 c5 03 	call	0x78a	; 0x78a <LCD_send_string>
 998:	ef ef       	ldi	r30, 0xFF	; 255
 99a:	f9 e6       	ldi	r31, 0x69	; 105
 99c:	28 e1       	ldi	r18, 0x18	; 24
 99e:	e1 50       	subi	r30, 0x01	; 1
 9a0:	f0 40       	sbci	r31, 0x00	; 0
 9a2:	20 40       	sbci	r18, 0x00	; 0
 9a4:	e1 f7       	brne	.-8      	; 0x99e <__stack+0x13f>
 9a6:	00 c0       	rjmp	.+0      	; 0x9a8 <__stack+0x149>
 9a8:	00 00       	nop
 9aa:	02 c0       	rjmp	.+4      	; 0x9b0 <__stack+0x151>
    LCD_init();
	Keypad_vinit();
	char flag=0;
	if (EEPROM_Read(PASS_SET) == 0xff)
	{
		LCD_send_string("PASS SET:");
 9ac:	01 e3       	ldi	r16, 0x31	; 49
 9ae:	6e cf       	rjmp	.-292    	; 0x88c <__stack+0x2d>
				flag=1;
			}
			
		}
	}
}
 9b0:	80 e0       	ldi	r24, 0x00	; 0
 9b2:	90 e0       	ldi	r25, 0x00	; 0
 9b4:	0f 90       	pop	r0
 9b6:	0f 90       	pop	r0
 9b8:	0f 90       	pop	r0
 9ba:	0f 90       	pop	r0
 9bc:	df 91       	pop	r29
 9be:	cf 91       	pop	r28
 9c0:	1f 91       	pop	r17
 9c2:	0f 91       	pop	r16
 9c4:	ff 90       	pop	r15
 9c6:	ef 90       	pop	r14
 9c8:	08 95       	ret

000009ca <__tablejump2__>:
 9ca:	ee 0f       	add	r30, r30
 9cc:	ff 1f       	adc	r31, r31
 9ce:	05 90       	lpm	r0, Z+
 9d0:	f4 91       	lpm	r31, Z
 9d2:	e0 2d       	mov	r30, r0
 9d4:	09 94       	ijmp

000009d6 <_exit>:
 9d6:	f8 94       	cli

000009d8 <__stop_program>:
 9d8:	ff cf       	rjmp	.-2      	; 0x9d8 <__stop_program>
